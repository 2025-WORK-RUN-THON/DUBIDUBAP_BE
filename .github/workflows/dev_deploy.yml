name: Guineafigma CI/CD

on:
  push:
    branches: [develop, main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          cat << 'EOF' > ./src/main/resources/application-prod.yml
          ${{ secrets.APPLICATION_PROD_YML }}
          EOF
        shell: bash

      - name: Grant permission to gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test --build-cache --parallel

      - name: Compress JAR with tar.gz # jar 파일 압축
        run: |
          mkdir -p package
          cp build/libs/*.jar package/
          tar --use-compress-program="gzip -1" -cf guineafigma-app.tar.gz -C package .
          echo "생성된 아티팩트:" && ls -lh guineafigma-app.tar.gz
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: guineafigma-artifact
          path: guineafigma-app.tar.gz # 압축된 tar.gz 파일만 업로드

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: guineafigma-artifact
          path: ./deploy-package

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          PROD_ENV: ${{ secrets.APPLICATION_PROD_ENV }}
        run: |
          cat << KEY_EOF > private_key.pem
          $EC2_SSH_KEY
          KEY_EOF
          chmod 600 private_key.pem

          tar_file=deploy-package/guineafigma-app.tar.gz

          # 로컬 아티팩트 존재 확인
          test -f "$tar_file" || { echo "Error: local artifact not found: $tar_file"; ls -lah deploy-package || true; exit 1; }

          # tar.gz 파일을 EC2로 전송 (압축 전송으로 속도 향상)
          scp -v -i private_key.pem -o StrictHostKeyChecking=no -o Compression=yes "$tar_file" "$EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/guineafigma-app.tar.gz"

          # 원격 파일 존재 확인
          ssh -i private_key.pem -o StrictHostKeyChecking=no "$EC2_USERNAME@$EC2_HOST" "ls -l /home/$EC2_USERNAME/guineafigma-app.tar.gz || exit 1"

          # 환경변수 파일 생성 및 전송
          cat << ENV_EOF > .env
          $PROD_ENV
          ENV_EOF
          scp -i private_key.pem -o StrictHostKeyChecking=no .env $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/.env

          # EC2에서 압축 해제 후 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << EOF
            set -euo pipefail
            U=$EC2_USERNAME
            cd /home/$U

            # Java 21 설치 (없으면 설치) - Amazon Linux (dnf/yum)
            if ! command -v java >/dev/null 2>&1; then
              if command -v dnf >/dev/null 2>&1; then
                sudo dnf install -y java-21-amazon-corretto-headless || sudo dnf install -y java-21-openjdk || true
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y java-21-amazon-corretto-headless || sudo yum install -y java-21-openjdk || true
              else
                echo "No supported package manager found (dnf/yum). Please install Java 21 manually." >&2
                exit 1
              fi
            fi

            # 기존 서비스 중지 (있을 때만)
            if systemctl list-units --type=service --all | grep -q '^guineafigma.service'; then
              sudo systemctl stop guineafigma || true
            fi

            # 이전 파일 정리 및 압축 해제
            rm -rf guineafigma-app
            if [ ! -f guineafigma-app.tar.gz ]; then
              echo "Error: guineafigma-app.tar.gz not found"
              exit 1
            fi
            mkdir -p guineafigma-app
            tar -xzf guineafigma-app.tar.gz -C guineafigma-app

            # 최신 JAR 파일 경로 확인
            latest_jar=\$(ls -1t guineafigma-app/*.jar 2>/dev/null | head -n 1)
            if [ -z "\$latest_jar" ]; then
              echo "Error: No JAR found after extraction"
              exit 1
            fi
            abs_jar="/home/\$U/\$latest_jar"

            # systemd 유닛 생성/갱신
            sudo tee /etc/systemd/system/guineafigma.service > /dev/null <<SERVICE
            [Unit]
            Description=Guineafigma Spring Boot Service
            After=network.target

            [Service]
            User=\$U
            WorkingDirectory=/home/\$U
            EnvironmentFile=/home/\$U/.env
            ExecStart=/usr/bin/java -jar \$abs_jar
            Restart=always
            RestartSec=10
            SuccessExitStatus=143
            LimitNOFILE=65536

            [Install]
            WantedBy=multi-user.target
            SERVICE

            sudo systemctl daemon-reload
            sudo systemctl enable guineafigma || true
            sudo systemctl restart guineafigma
            sudo systemctl --no-pager status guineafigma | sed -n '1,80p'
          EOF

          rm -f private_key.pem .env
