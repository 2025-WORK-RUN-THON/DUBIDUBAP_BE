name: Guineafigma CI/CD

on:
  push:
    branches: [develop, main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          cat << 'EOF' > ./src/main/resources/application-prod.yml
          ${{ secrets.APPLICATION_PROD_YML }}
          EOF
        shell: bash

      - name: Grant permission to gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (bootJar only)
        run: ./gradlew clean bootJar --build-cache --parallel

      - name: Verify prod config packaged
        run: |
          JAR=build/libs/guineafigma-server.jar
          test -f "$JAR" || { echo "Jar not found: $JAR"; ls -lah build/libs; exit 1; }
          echo "Checking JAR: $JAR"
          jar tf "$JAR" | grep -q 'BOOT-INF/classes/application-prod.yml'

      - name: Compress JAR with tar.gz # jar 파일 압축
        run: |
          mkdir -p package
          JAR=build/libs/guineafigma-server.jar
          echo "Packaging JAR: $JAR"
          cp "$JAR" package/guineafigma-server.jar
          tar --use-compress-program="gzip -1" -cf guineafigma-app.tar.gz -C package guineafigma-server.jar
          echo "생성된 아티팩트:" && ls -lh guineafigma-app.tar.gz
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: guineafigma-artifact
          path: guineafigma-app.tar.gz # 압축된 tar.gz 파일만 업로드

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: guineafigma-artifact
          path: ./deploy-package

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          PROD_ENV: ${{ secrets.APPLICATION_PROD_ENV }}
        run: |
          cat << KEY_EOF > private_key.pem
          $EC2_SSH_KEY
          KEY_EOF
          chmod 600 private_key.pem

          tar_file=deploy-package/guineafigma-app.tar.gz

          # 로컬 아티팩트 존재 확인
          test -f "$tar_file" || { echo "Error: local artifact not found: $tar_file"; ls -lah deploy-package || true; exit 1; }

          # tar.gz 파일을 EC2로 전송 (압축 전송으로 속도 향상)
          scp -v -i private_key.pem -o StrictHostKeyChecking=no -o Compression=yes "$tar_file" "$EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/guineafigma-app.tar.gz"

          # 원격 파일 존재 확인
          ssh -i private_key.pem -o StrictHostKeyChecking=no "$EC2_USERNAME@$EC2_HOST" "ls -l /home/$EC2_USERNAME/guineafigma-app.tar.gz || exit 1"

          # 환경변수 파일 생성 및 전송
          cat << ENV_EOF > .env
          $PROD_ENV
          ENV_EOF
          scp -i private_key.pem -o StrictHostKeyChecking=no .env $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/.env

          # EC2에서 압축 해제 후 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'REMOTE'
          set -euo pipefail
          U="$(whoami)"
          cd "/home/$U"

          # Java 21 설치 보장
          if ! command -v java >/dev/null 2>&1; then
            if command -v dnf >/dev/null 2>&1; then sudo dnf install -y java-21-amazon-corretto-headless || sudo dnf install -y java-21-openjdk;
            elif command -v yum >/dev/null 2>&1; then sudo yum install -y java-21-amazon-corretto-headless || sudo dnf install -y java-21-openjdk || sudo yum install -y java-21-openjdk;
            else echo "Install Java 21 first"; exit 1; fi
          fi

          # 기존 서비스 중지
          if systemctl list-units --type=service --all | grep -q '^guineafigma.service'; then
            sudo systemctl stop guineafigma || true
          fi

          # 압축 해제(단일 JAR: guineafigma-server.jar)
          rm -rf guineafigma-app
          mkdir -p guineafigma-app
          tar -xzf guineafigma-app.tar.gz -C guineafigma-app
          abs_jar="/home/$U/guineafigma-app/guineafigma-server.jar"
          test -f "$abs_jar" || { echo "Error: JAR not found at $abs_jar"; ls -lah guineafigma-app; exit 1; }

          # systemd 유닛 완성본 생성 (printf 사용: YAML/쉘 heredoc 충돌 회피)
          sudo bash -c 'printf "%s\n" \
            "[Unit]" \
            "Description=Guineafigma Spring Boot Service" \
            "After=network-online.target" \
            "Wants=network-online.target" \
            "" \
            "[Service]" \
            "User='$U'" \
            "WorkingDirectory=/home/'$U'/guineafigma-app" \
            "Environment=SPRING_PROFILES_ACTIVE=prod" \
            "EnvironmentFile=/home/'$U'/.env" \
            "ExecStart=/usr/bin/java -jar '$abs_jar'" \
            "SuccessExitStatus=143" \
            "Restart=always" \
            "RestartSec=10" \
            "LimitNOFILE=65536" \
            "" \
            "[Install]" \
            "WantedBy=multi-user.target" \
            > /etc/systemd/system/guineafigma.service'

          sudo systemctl daemon-reload
          sudo systemctl enable guineafigma || true
          sudo systemctl restart guineafigma

          # 헬스 체크(최대 8회 재시도)
          for i in 1 2 3 4 5 6 7 8; do
            sleep 2
            if curl -fsS http://localhost:8080/api/v1/system/health >/dev/null; then
              echo "Health OK"; exit 0
            fi
          done
          echo "Health check failed"; journalctl -u guineafigma -n 200 | tail -n 200; exit 1
          REMOTE

          rm -f private_key.pem .env
